#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "cuda.h"
#include "cuda_runtime.h"

#define CU_CALL(stmt) \
    do { \
        CUresult err = CUDA_SUCCESS; \
        err = (stmt); \
        if (err != CUDA_SUCCESS) { \
            fprintf(stderr, "Failed at "#stmt" return %d\n", err); \
        } \
    } while (0)

#define CUDA_PRINT_ATTR(dev_id, attr) \
    do { \
        CUdevice dev; \
        CU_CALL(cuDeviceGet(&dev, (dev_id))); \
        int dev_attr = 0; \
        CU_CALL(cuDeviceGetAttribute(&dev_attr, (attr), dev)); \
        printf(#attr"=%d\n", dev_attr); \
    } while (0)

int main(int argc, char *argv[])
{
    CUdevice dev;

    CU_CALL(cuInit(0));

    int dev_count = 0;
    CU_CALL(cuDeviceGetCount(&dev_count));

    for (int dev_idx = 0; dev_idx < dev_count; dev_idx++) {
        printf("=== dev %d ===\n", dev_idx);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES);

        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_WARP_SIZE); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_PITCH); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CLOCK_RATE); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GPU_OVERLAP); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_INTEGRATED); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_COMPUTE_MODE);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_ECC_ENABLED); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_PCI_BUS_ID);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_TCC_DRIVER); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED);
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK); */
        /* CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED); */
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES);
        CUDA_PRINT_ATTR(dev_idx, CU_DEVICE_ATTRIBUTE_DEFERRED_MAPPING_CUDA_ARRAY_SUPPORTED);
    }


    /* int dev_attr = 0; */
    /* res = cuDeviceGetAttribute(&dev_attr, CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS, dev); */
    /* assert(res == CUDA_SUCCESS); */
    /* printf("CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS=%d\n", dev_attr); */
    /* res = cuDeviceGetAttribute(&dev_attr, CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR, dev); */
    /* assert(res == CUDA_SUCCESS); */
    /* printf("CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR=%d\n", dev_attr); */
    return 0;
}
